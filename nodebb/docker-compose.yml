services:
  nodebb:
    image: elestio/nodebb:${NODEBB_VERSION:-v4.4.6}
    restart: always
    environment:
      URL: "${APP_URL}"
      DATABASE: "redis"
      DB_NAME: "0"
      DB_HOST: "redis"
      DB_PORT: "8443"
      START_BUILD: "true"
      CONFIG_DIR: "/opt/config"
      # FORCE_BUILD_BEFORE_START: "true"
      NODEBB_ADMIN_PASSWORD: "${NODEBB_ADMIN_PASSWORD}"
      NODEBB_ADMIN_EMAIL: "${NODEBB_ADMIN_EMAIL}"
      NODEBB_ADMIN_USERNAME: "${NODEBB_ADMIN_USERNAME}"
    depends_on:
      nodebb-generate-config:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    # /usr/src/app/install/docker/entrypoint.sh
    # /usr/src/app/elestio/entrypoint.sh
    # /usr/local/bin/docker-entrypoint.sh
    entrypoint:
      - bash
      - -c
    command:
      - >
        sh /usr/src/app/install/docker/entrypoint.sh;
    volumes:
      - ./files:/usr/src/app/public/uploads
      - ./config:/opt/config
    ports:
      - "127.0.0.1:${PORT:-4567}:4567"

  nodebb-generate-config:
    build: 
      context: .
      no_cache: true
      dockerfile_inline: |
        FROM alpine
        COPY ./mkconfig.sh /
    volumes:
      - ./config:/config
    command: sh /mkconfig.sh
    environment:
      NODEBB_URL: "${NODEBB_URL}"
      NODEBB_VERSION: "${NODEBB_VERSION}"
      NODEBB_ADMIN_PASSWORD: "${NODEBB_ADMIN_PASSWORD}"
      NODEBB_ADMIN_EMAIL: "${NODEBB_ADMIN_EMAIL}"
      NODEBB_ADMIN_USERNAME: "${NODEBB_ADMIN_USERNAME}"
      NODEBB_SECRET: "${NODEBB_SECRET}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"

  redis:
    image: redis
    restart: always
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    volumes:
      - ./data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --pass '${REDIS_PASSWORD}' ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure
