[
  {
    "id": "baserow",
    "name": "Baserow",
    "intro": "Open source no-code database tool and Airtable alternative.",
    "logo": "https://gitlab.com/uploads/-/system/project/avatar/10858056/Logo.png?width=96",
    "experimental": true,
    "tags": [
      "baserow",
      "oss",
      "database",
      "no-code",
      "airtable"
    ],
    "app": {
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "baserow",
      "env": {
        "PORT": "3000",
        "BASEROW_PUBLIC_URL": "${APP_URL}",
        "SECRET_KEY": "${GENERATED_HASH}",
        "HEALTH_URL": "/_health"
      }
    },
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/X_3CoteDuaw",
    "provider": "Digital Ocean",
    "deployTime": "~2 minutes",
    "description": "Baserow is an open-source no-code database tool and Airtable alternative. It allows you to create custom databases, manage data, and build applications without the need for coding. Whether you're a beginner or an experienced developer, Baserow provides a user-friendly interface to manage your data and build powerful applications.",
    "services": [
      "docker"
    ]
  },
  {
    "id": "beszel",
    "name": "Beszel",
    "intro": "Lightweight, privacy-focused server monitoring platform with Docker stats, historical data, and configurable alerts.",
    "description": "Beszel is a simple, lightweight server monitoring platform that provides real-time\nand historical metrics for your systems and containers. With a friendly web interface,\neasy setup, and no need for public internet exposure, Beszel tracks CPU, memory, disk,\nnetwork, and temperature usage, and supports configurable alerts for system health.\nFeatures include multi-user support, OAuth/OIDC authentication, automatic backups,\nand a REST API for integration. The platform consists of a web-based hub and agents\nthat collect and report system metrics, making it ideal for secure, resource-efficient\ninfrastructure monitoring.\n",
    "logo": "https://beszel.dev/icon.svg",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 4
    },
    "deployTime": "~2 minutes",
    "tags": [
      "monitoring",
      "oss",
      "devops"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "beszel",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT": "8090",
        "HUB_URL": "${APP_URL}",
        "TOKEN": "${GENERATED_HASH}",
        "KEY": "${GENERATED_SECRET}"
      }
    }
  },
  {
    "id": "boilerplate-python",
    "name": "Lithium Python Boilerplate",
    "intro": "A boilerplate for building modern Python Django app.",
    "description": "Lithium is a batteries-included Django starter project with everything you need to start coding, including user authentication, static files, default styling, debugging, DRY forms, custom error pages, and more.\nFork this repo and start building your own app quikly. \n",
    "logo": "https://s3.dualstack.us-east-2.amazonaws.com/pythondotorg-assets/media/community/logos/python-logo-only.png",
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 10
    },
    "deployTime": "~3 minutes",
    "tags": [
      "python",
      "template"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/huksley/python-django-lithium",
      "sourceBranch": "main",
      "env": {
        "PORT": 8000
      }
    }
  },
  {
    "id": "boilerplate-t3-app",
    "name": "Next.js T3 app",
    "intro": "A boilerplate for building modern Next.js app with T3 stack.",
    "description": "The best way to start a full-stack, typesafe Next.js app. \nFork this repo and start building your own app quikly. Or go to https://create.t3.gg to learn more about the T3 stack.\n",
    "logo": "https://assets.vercel.com/image/upload/v1662130559/nextjs/Icon_light_background.png",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "deployTime": "~3 minutes",
    "tags": [
      "nextjs",
      "template",
      "typescript"
    ],
    "app": {
      "type": "next",
      "repositoryUrl": "https://github.com/huksley/t3-dollardeploy",
      "sourceBranch": "main",
      "env": {
        "PORT": 3000
      }
    }
  },
  {
    "id": "cal-com-docker",
    "name": "Cal.com",
    "intro": "Cal.com is an open-source scheduling infrastructure for absolutely everyone.",
    "logo": "https://raw.githubusercontent.com/calcom/cal.com/main/apps/web/public/android-chrome-192x192.png",
    "experimental": false,
    "tags": [
      "oss",
      "scheduling",
      "calendar",
      "booking",
      "meeting"
    ],
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "env": {
        "NEXT_PUBLIC_WEBAPP_URL": "https://${APP_HOSTNAME}",
        "NEXT_PUBLIC_API_V2_URL": "https://${APP_HOSTNAME}/api/v2",
        "NEXT_PUBLIC_WEBSITE_TERMS_URL": "https://example.com",
        "NEXT_PUBLIC_WEBSITE_PRIVACY_POLICY_URL": "https://example.com",
        "NEXT_PUBLIC_LICENSE_CONSENT": "agree",
        "CALCOM_TELEMETRY_DISABLED": 1,
        "NEXTAUTH_SECRET": "${GENERATED_HASH}",
        "CALENDSO_ENCRYPTION_KEY": "${GENERATED_HASH}",
        "POSTGRES_USER": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_DB": "postgres",
        "DATABASE_HOST": "database:5432",
        "DATABASE_URL": "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}/${POSTGRES_DB}",
        "DATABASE_DIRECT_URL": "${DATABASE_URL}",
        "EMAIL_FROM": "hello@example.com",
        "DOCKER_COMPOSE_WAIT_TIMEOUT": 600,
        "PORT": 3000
      },
      "repositoryUrl": "https://github.com/calcom/docker",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yaml",
      "preStartCmd": "bash ./fixdocker.sh",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nsed -e \"s/- 3000:3000/- 127.0.0.1:\\$PORT:3000/g\" -i docker-compose.yaml\nsed -e \"s/studio:/studio-optional:\\n    profiles: [withstudio]/g\" -i docker-compose.yaml  \n"
        }
      ]
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/60HJt8DOVNo",
    "deployTime": "~10 minutes",
    "description": "Cal.com is a scheduling infrastructure for everyone. It's an open source alternative to Calendly that allows you to schedule meetings efficiently and integrate with various calendar services.",
    "services": [
      "docker"
    ]
  },
  {
    "id": "cal-com",
    "name": "Cal.com",
    "intro": "Cal.com is an open-source scheduling infrastructure for absolutely everyone.",
    "logo": "https://raw.githubusercontent.com/calcom/cal.com/main/apps/web/public/android-chrome-192x192.png",
    "experimental": true,
    "tags": [
      "oss",
      "scheduling",
      "calendar",
      "booking",
      "meeting"
    ],
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "next",
      "env": {
        "NEXT_PUBLIC_WEBAPP_URL": "https://${APP_HOSTNAME}",
        "NEXT_PUBLIC_API_V2_URL": "https://${APP_HOSTNAME}/api/v2",
        "NEXTAUTH_URL": "https://${APP_HOSTNAME}",
        "NEXTAUTH_SECRET": "${GENERATED_HASH}",
        "DATABASE_URL": "postgresql://postgres:postgres@localhost:5432/postgres",
        "CALENDSO_ENCRYPTION_KEY": "${GENERATED_HASH}",
        "NEXT_PUBLIC_LICENSE_CONSENT": "agree",
        "CALCOM_TELEMETRY_DISABLED": true,
        "PRISMA_SCHEMA_PATH": "packages/prisma/schema.prisma",
        "NODE_OPTIONS": "--max-old-space-size=4096"
      },
      "repositoryUrl": "https://github.com/calcom/cal.com.git",
      "sourceBranch": "v4.8.19",
      "startScript": "start",
      "buildScript": "build",
      "buildIncludeFiles": "packages/prisma",
      "preStartCmd": "npx prisma migrate deploy --schema packages/prisma/schema.prisma && yarn db-deploy",
      "postStartCmd": "yarn db-seed"
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/60HJt8DOVNo",
    "deployTime": "~10 minutes",
    "description": "Cal.com is a scheduling infrastructure for everyone. It's an open source alternative to Calendly that allows you to schedule meetings efficiently and integrate with various calendar services.",
    "services": [
      "postgres"
    ]
  },
  {
    "id": "cal-com-old",
    "name": "Cal.com old",
    "intro": "Cal.com is an open-source scheduling infrastructure for absolutely everyone.",
    "logo": "https://raw.githubusercontent.com/calcom/cal.com/main/apps/web/public/android-chrome-192x192.png",
    "experimental": true,
    "tags": [
      "oss",
      "scheduling",
      "calendar",
      "booking",
      "meeting"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "type": "next",
      "env": {
        "NEXT_PUBLIC_WEBAPP_URL": "https://${APP_HOSTNAME}",
        "NEXTAUTH_URL": "https://${APP_HOSTNAME}",
        "NEXTAUTH_SECRET": "${GENERATED_HASH}",
        "DATABASE_URL": "postgresql://postgres:postgres@$localhost:5432/postgres",
        "CALENDSO_ENCRYPTION_KEY": "${GENERATED_HASH}",
        "NEXT_PUBLIC_LICENSE_CONSENT": "agree"
      },
      "repositoryUrl": "https://github.com/calcom/cal.com.git",
      "sourcePath": "apps/web",
      "sourceBranch": "main",
      "startScript": "start",
      "buildScript": "build",
      "installCmd": "yarn install --frozen-lockfile",
      "preStartCmd": "npx prisma db push --skip-generate && yarn db-deploy",
      "postStartCmd": "yarn db-seed"
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/60HJt8DOVNo",
    "deployTime": "~10 minutes",
    "description": "Cal.com is a scheduling infrastructure for everyone. It's an open source alternative to Calendly that allows you to schedule meetings efficiently and integrate with various calendar services.",
    "services": [
      "postgres"
    ]
  },
  {
    "id": "chatwoot",
    "name": "Chatwoot",
    "intro": "Open source live chat software",
    "description": "Chatwoot is a customer support tool for instant messaging channels",
    "logo": "https://app.chatwoot.com/brand-assets/logo_thumbnail.svg",
    "tags": [
      "customer-support",
      "live-chat",
      "messaging",
      "oss",
      "whatsapp"
    ],
    "deployTime": "~3 minutes",
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/E4xUHyAAktY",
    "services": [
      "docker"
    ],
    "app": {
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourceBranch": "main",
      "sourcePath": "chatwoot",
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "preStartCmd": "bash ./fixdocker.sh",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nmkdir -p data\nmkdir -p data/tmp\nmkdir -p data/storage\nmkdir -p data/postgres\nmkdir -p data/redis\ndocker compose run --rm rails bundle exec rails db:chatwoot_prepare\n"
        }
      ],
      "env": {
        "ACTIVE_STORAGE_SERVICE": "local",
        "ENABLE_ACCOUNT_SIGNUP": "false",
        "ENABLE_PUSH_RELAY_SERVER": "true",
        "FORCE_SSL": "false",
        "FRONTEND_URL": "${APP_URL}",
        "LOG_LEVEL": "info",
        "LOG_SIZE": "500",
        "POSTGRES_HOST": "postgres",
        "POSTGRES_PASSWORD": "123",
        "POSTGRES_USERNAME": "postgres",
        "REDIS_URL": "redis://redis:6379",
        "REDIS_PASSWORD": "",
        "SECRET_KEY_BASE": "${GENERATED_HASH}",
        "PORT": "3000",
        "CHATWOOT_VERSION": "v4.4.0-ce",
        "PRE_START_TIMEOUT": "300"
      }
    }
  },
  {
    "id": "chatwoot3",
    "name": "Chatwoot 3.16",
    "intro": "Open source live chat software",
    "description": "Chatwoot is a customer support tool for instant messaging channels",
    "logo": "https://app.chatwoot.com/brand-assets/logo_thumbnail.svg",
    "deployTime": "~3 minutes",
    "experimental": true,
    "tags": [
      "oss",
      "live-chat",
      "customer-support",
      "instant-messaging"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/E4xUHyAAktY",
    "services": [
      "docker"
    ],
    "app": {
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourceBranch": "main",
      "sourcePath": "chatwoot3",
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "preStartCmd": "bash ./fixdocker.sh",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\ndocker compose run --rm rails bundle exec rails db:chatwoot_prepare\n"
        }
      ],
      "env": {
        "ACTIVE_STORAGE_SERVICE": "local",
        "ENABLE_ACCOUNT_SIGNUP": "false",
        "ENABLE_PUSH_RELAY_SERVER": "true",
        "FORCE_SSL": "false",
        "FRONTEND_URL": "${APP_URL}",
        "LOG_LEVEL": "info",
        "LOG_SIZE": "500",
        "POSTGRES_HOST": "postgres",
        "POSTGRES_PASSWORD": "123",
        "POSTGRES_USERNAME": "postgres",
        "REDIS_URL": "redis://redis:6379",
        "SECRET_KEY_BASE": "ahkaec8eeveiyieL",
        "PORT": "3000"
      }
    }
  },
  {
    "id": "code-server",
    "name": "Code Server",
    "intro": "Run VS Code on any machine anywhere and access it in the browser.",
    "logo": "https://raw.githubusercontent.com/dollardeploy/templates/refs/heads/main/coder-server/icon.svg",
    "tags": [
      "development",
      "ide",
      "oss"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 10
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "coder-server",
      "sourceBranch": "main",
      "env": {
        "PORT": 3000,
        "SERVER_URL": "${APP_URL}",
        "PASSWORD": "${GENERATED_PWD}"
      },
      "preStartCmd": "mkdir -p ../.local && mkdir -p ../.config"
    },
    "deployTime": "~3 minutes",
    "description": "This template launches code-server, which is VS Code running on a remote server, accessible through the browser. It allows you to code on any device with a consistent development environment.",
    "services": [
      "docker"
    ]
  },
  {
    "id": "courselit",
    "name": "CourseLit",
    "intro": "CourseLit is a free and open-source learning management system (LMS) for online courses.",
    "logo": "https://avatars.githubusercontent.com/u/13856732",
    "tags": [
      "lms",
      "education",
      "e-learning",
      "oss"
    ],
    "deployTime": "~5 minutes",
    "description": "CourseLit is a free and open-source learning management system (LMS) for online courses.\nIt is designed to be easy to use and customizable, making it a great choice for educators\nand institutions looking to create and manage online courses.\n\nCourseLit is built on top of the Codelit framework, which provides a powerful and flexible\nplatform for building web applications.\n",
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "courselit",
      "sourceBranch": "main",
      "env": {
        "NODE_ENV": "production",
        "SERVER_URL": "${APP_URL}",
        "AUTH_SECRET": "${GENERATED_HASH}",
        "AUTH_TRUST_HOST": true,
        "PORT": 3000,
        "DB_CONNECTION_STRING": "mongodb://courselit:123456@mongo/courselit?authSource=admin",
        "EMAIL_USER": "test@example.com",
        "EMAIL_PASS": "test",
        "EMAIL_HOST": "smtp.example.com",
        "EMAIL_FROM": "test@example.com",
        "EMAIL_PORT": 587,
        "EMAIL_SECURE": false,
        "SUPER_ADMIN_EMAIL": "${USER_EMAIL}"
      }
    },
    "postLaunchNote": "Username is your e-mail. To login, setup SMTP server settings\nin the environment variables, redeploy and try to login.\n\n  \n"
  },
  {
    "id": "directus",
    "name": "Directus",
    "intro": "The Modern & Powerful CMS and BaaS",
    "logo": "https://raw.githubusercontent.com/directus/directus/refs/heads/main/docs/public/favicon.svg",
    "tags": [
      "headless",
      "cms",
      "baas",
      "oss"
    ],
    "deployTime": "~3 minutes",
    "description": "The flexible backend for all of your projects.\nTurn your data into a headless CMS, admin panels, or apps with a custom UI, instant APIs, auth & more. Built for devs, used by everyone.\n",
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "directus",
      "sourceBranch": "main",
      "env": {
        "SECRET": "${GENERATED_HASH}",
        "PUBLIC_URL": "${APP_URL}",
        "ADMIN_EMAIL": "admin@${APP_HOSTNAME}",
        "ADMIN_PASSWORD": "${GENERATED_PWD}",
        "PORT": "8055"
      },
      "preStartCmd": "bash ./fixdocker.sh",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nmkdir -p ./data/database\nmkdir -p ./data/extensions\nmkdir -p ./data/uploads\nsudo chown -R \"$USER_UID:$USER_GID\" ./data/extensions\nsudo chown -R \"$USER_UID:$USER_GID\" ./data/uploads\n"
        }
      ]
    }
  },
  {
    "id": "dozzle",
    "name": "Dozzle",
    "intro": "A simple, lightweight web interface for monitoring Docker containers.",
    "description": "Dozzle is a simple, lightweight web interface for monitoring Docker containers.\nIt provides a real-time view of all your containers, with detailed information\nabout each container's status, logs, and metrics.\n",
    "logo": "https://dozzle.dev/logo.svg",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 2
    },
    "deployTime": "~3 minutes",
    "tags": [
      "monitoring",
      "devops",
      "oss"
    ],
    "experimental": true,
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "dozzle",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT": "8080",
        "DOZZLE_AUTH_PROVIDER": "simple"
      }
    }
  },
  {
    "id": "erpnext",
    "name": "Frappe - ERPNext",
    "intro": "ERPNext is a free and open-source integrated Enterprise resource planning",
    "logo": "https://avatars.githubusercontent.com/u/836974",
    "tags": [
      "erp",
      "business-management",
      "oss",
      "frappe"
    ],
    "experimental": true,
    "deployTime": "~10 minutes",
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/RjTipQpUvNQ",
    "description": "ERPNext is a full-featured business management solution that helps SMEs\nto record all their business transactions in a single system. With ERPNext, SMEs\ncan make informed, fact-based, timely decisions to remain ahead in the competition.\nIt serves as the backbone of a business adding strength, transparency, and control\nto your growing enterprise.\n",
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "services": [
      "docker"
    ],
    "postLaunchNote": "Username is `Administrator` and password is `${ADMIN_PASSWORD}`.\n",
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "erpnext",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "ADMIN_PASSWORD": "${GENERATED_PWD}",
        "TAG": "v15.71.1",
        "PORT": 8080
      }
    }
  },
  {
    "id": "evo-ai-api",
    "name": "EVO AI API",
    "logo": "https://avatars.githubusercontent.com/u/136080052",
    "intro": "Evo AI is an open-source platform for creating and managing AI agents",
    "description": "Evo AI is an open-source platform for creating and managing AI agents, \nenabling integration with different AI models and services. \n",
    "tags": [
      "oss",
      "ai",
      "ai-agent"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/EvolutionAPI/evo-ai/",
      "sourceBranch": "develop",
      "env": {
        "PORT": 8000,
        "ADMIN_EMAIL": "admin@evoai.com",
        "ADMIN_INITIAL_PASSWORD": "${GENERATED_PWD}",
        "DEBUG": false,
        "ENCRYPTION_KEY": "${GENERATED_HASH}",
        "JWT_EXPIRATION_TIME": 3600,
        "POSTGRES_CONNECTION_STRING": "postgresql://postgres:root@localhost:5432/evo_ai",
        "POSTGRES_PORT": 5433,
        "REDIS_SSL": false,
        "REDIS_TTL": 3600,
        "TOOLS_CACHE_TTL": 3600
      }
    }
  },
  {
    "id": "evo-ai-frontend",
    "name": "EVO AI",
    "intro": "This is Next.js frontend for EVO AI",
    "logo": "https://avatars.githubusercontent.com/u/136080052",
    "description": "Evo AI is an open-source platform for creating and managing AI agents, \nenabling integration with different AI models and services. \n",
    "tags": [
      "oss",
      "ai",
      "ai-agent"
    ],
    "app": {
      "type": "next",
      "repositoryUrl": "https://github.com/EvolutionAPI/evo-ai",
      "sourcePath": "frontend",
      "env": {
        "PORT": 3005,
        "API_URL": "https://api.example.com",
        "NEXT_PUBLIC_API_URL": "${API_URL}"
      }
    }
  },
  {
    "id": "evolution-api",
    "name": "Evolution API",
    "intro": "Evolution API is an open-source WhatsApp integration API (version ${IMAGE_TAG})",
    "logo": "https://avatars.githubusercontent.com/u/136080052",
    "tags": [
      "oss",
      "whatsapp",
      "instant-messaging",
      "customer-support"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "evolution-api",
      "env": {
        "PORT": 8080,
        "IMAGE_TAG": "v2.3.0",
        "SERVER_TYPE": "http",
        "SERVER_PORT": "${PORT}",
        "SERVER_URL": "${APP_URL}",
        "SENTRY_DSN": "",
        "CORS_ORIGIN": "*",
        "CORS_METHODS": "GET,POST,PUT,DELETE",
        "CORS_CREDENTIALS": "true",
        "LOG_LEVEL": "ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS,WEBSOCKET",
        "LOG_COLOR": "true",
        "LOG_BAILEYS": "error",
        "EVENT_EMITTER_MAX_LISTENERS": "50",
        "DEL_INSTANCE": "false",
        "DATABASE_PROVIDER": "postgresql",
        "DATABASE_CONNECTION_URI": "postgresql://user:pass@postgres:5432/evolution?schema=public",
        "DATABASE_CONNECTION_CLIENT_NAME": "evolution_exchange",
        "DATABASE_SAVE_DATA_INSTANCE": "true",
        "DATABASE_SAVE_DATA_NEW_MESSAGE": "true",
        "DATABASE_SAVE_MESSAGE_UPDATE": "true",
        "DATABASE_SAVE_DATA_CONTACTS": "true",
        "DATABASE_SAVE_DATA_CHATS": "true",
        "DATABASE_SAVE_DATA_LABELS": "true",
        "DATABASE_SAVE_DATA_HISTORIC": "true",
        "DATABASE_SAVE_IS_ON_WHATSAPP": "true",
        "DATABASE_SAVE_IS_ON_WHATSAPP_DAYS": "7",
        "DATABASE_DELETE_MESSAGE": true,
        "RABBITMQ_ENABLED": false,
        "SQS_ENABLED": false,
        "WEBSOCKET_ENABLED": false,
        "PUSHER_GLOBAL_ENABLED": false,
        "WA_BUSINESS_TOKEN_WEBHOOK": "evolution",
        "WA_BUSINESS_URL": "https://graph.facebook.com",
        "WA_BUSINESS_VERSION": "v20.0",
        "WA_BUSINESS_LANGUAGE": "en_US",
        "WEBHOOK_GLOBAL_ENABLED": false,
        "WEBHOOK_GLOBAL_URL": "",
        "CONFIG_SESSION_PHONE_CLIENT": "Evolution API",
        "CONFIG_SESSION_PHONE_NAME": "Chrome",
        "CONFIG_SESSION_PHONE_VERSION": "2.3000.1015901307",
        "QRCODE_LIMIT": 30,
        "QRCODE_COLOR": "#175197",
        "TYPEBOT_ENABLED": false,
        "CHATWOOT_ENABLED": false,
        "OPENAI_ENABLED": false,
        "DIFY_ENABLED": false,
        "CACHE_REDIS_ENABLED": true,
        "CACHE_REDIS_URI": "redis://redis:6379/6",
        "CACHE_REDIS_TTL": 604800,
        "CACHE_REDIS_PREFIX_KEY": "evolution",
        "CACHE_REDIS_SAVE_INSTANCES": false,
        "CACHE_LOCAL_ENABLED": false,
        "S3_ENABLED": false,
        "AUTHENTICATION_API_KEY": "${GENERATED_HASH}",
        "AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES": true,
        "LANGUAGE": "en"
      }
    },
    "deployTime": "~10 minutes",
    "description": "Evolution API is a messaging service that allows you to send and receive messages from your application,\ncompatible with WhatsApp, Chatwoot, and more.\n",
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "services": [
      "docker"
    ]
  },
  {
    "id": "ghost-cms",
    "name": "Ghost CMS",
    "intro": "Ghost is an independent platform for publishing online by web and email newsletter.",
    "logo": "https://raw.githubusercontent.com/dollardeploy/templates/refs/heads/main/ghost-cms/157884383-1b75feb1-45d8-4430-b636-3f7e06577347.png",
    "tags": [
      "cms",
      "blog",
      "newsletter",
      "oss",
      "popular"
    ],
    "deployTime": "~3 minutes",
    "description": "Ghost is a powerful app for professional publishers to create, share, and \ngrow a business around their content. It comes with modern tools to build a \nwebsite, publish content, send newsletters & offer paid subscriptions to members.\n",
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "ghost-cms",
      "sourceBranch": "main",
      "env": {
        "SERVER_URL": "${APP_URL}",
        "MYSQL_PASSWORD": "${GENERATED_PWD}",
        "PORT": 3000,
        "MAIL_FROM": "example@example.com",
        "MAIL_HOST": "127.0.0.1",
        "MAIL_PORT": 485,
        "MAIL_USERNAME": "username",
        "MAIL_PASSWORD": "password",
        "MAIL_SECURE": false,
        "BULK_EMAIL_BATCH": 5
      }
    }
  },
  {
    "id": "homarr",
    "name": "Homarr",
    "intro": "A simple, yet powerful dashboard for your server.",
    "logo": "https://homarr.dev/img/favicon.png",
    "tags": [
      "dashboard",
      "server-management",
      "monitoring",
      "oss"
    ],
    "deployTime": "~3 minutes",
    "description": "Simplify the management of your server with Homarr - a sleek, modern dashboard that puts all of your apps and services at your fingertips.\n",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "homarr",
      "sourceBranch": "main",
      "env": {
        "NEXTAUTH_URL": "${APP_URL}",
        "PORT": "3010"
      }
    }
  },
  {
    "id": "inngest",
    "name": "Inngest",
    "intro": "The platform for building agentic workflows and agents powering AI products from experiment to production.",
    "description": "Inngest is the orchestration engine for building agentic workflows and fully autonomous AI agents, powering products from experiment to production.\nDevelop reliable, fault-tolerant, and scalable AI applications with step-based workflows, built-in retries, observability, and instant local development.\nFocus on your product, not infrastructure—Inngest provides the building blocks to ship AI features faster, with enterprise-grade reliability and security.\n",
    "logo": "https://avatars.githubusercontent.com/u/78935958",
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 20
    },
    "deployTime": "~3 minutes",
    "tags": [
      "workflow",
      "automation",
      "devops",
      "integration"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "inngest",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT": "3000",
        "WORKERS_PORT": "3001",
        "INNGEST_EVENT_KEY": "ek_${GENERATED_HASH}",
        "INNGEST_SIGNING_KEY": "${GENERATED_SECRET}",
        "INNGEST_ENV": "prod",
        "INNGEST_DEV": 0
      }
    }
  },
  {
    "id": "local-ai-cpu",
    "name": "Local AI (CPU)",
    "intro": "Local AI is an open-source, self-hostable online OpenAI API compatible service with WebUI to chat, generate images and more.",
    "logo": "https://github.com/mudler/LocalAI/blob/master/docs/static/android-chrome-192x192.png?raw=true",
    "tags": [
      "ai",
      "machine-learning",
      "openai",
      "oss"
    ],
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 60
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "local-ai-cpu",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yml",
      "allowAccessFrom": "${USER_IPADDRESS}",
      "env": {
        "PORT": 8080
      }
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/Xh57mMlfuMk",
    "deployTime": "~20 minutes",
    "description": "Local AI is an open-source, self-hostable online OpenAI API compatible service with chatbot UI.",
    "services": [
      "docker"
    ]
  },
  {
    "id": "local-ai-nvidia-cuda-12",
    "name": "Local AI (NVidia CUDA 12)",
    "intro": "Local AI is an open-source, self-hostable online OpenAI API compatible service with WebUI to chat, generate images and more. Works best with DataCrunch provider and GPU instances.",
    "logo": "https://github.com/mudler/LocalAI/blob/master/docs/static/android-chrome-192x192.png?raw=true",
    "tags": [
      "ai",
      "machine-learning",
      "openai",
      "oss",
      "nvidia",
      "cuda"
    ],
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 60
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "local-ai-nvidia-cuda-12",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yml",
      "allowAccessFrom": "${USER_IPADDRESS}",
      "env": {
        "PORT": 8080
      }
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/Xh57mMlfuMk",
    "deployTime": "~20 minutes",
    "description": "Local AI is an open-source, self-hostable online OpenAI API compatible service with chatbot UI. This template is compatible with server which have NVidia GPU with CUDA 12 configured. We tested it with DataCrunch provider in DollarDeploy, and it works well with GPU instances of type A6000 and better (1€/hr).",
    "services": [
      "docker"
    ]
  },
  {
    "id": "mailpit",
    "name": "Mailpit",
    "intro": "Mailpit is a simple SMTP server that allows you to capture emails sent from your application.",
    "logo": "https://mailpit.axllent.org/images/mailpit.svg",
    "tags": [
      "email",
      "smtp",
      "development",
      "oss"
    ],
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "mailpit",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yml",
      "preStartCmd": "bash ./fixdocker.sh",
      "env": {
        "PORT": "8025",
        "MP_MAX_MESSAGES": 5000,
        "MP_DATABASE": "/data/mailpit.db",
        "MP_SMTP_AUTH_ACCEPT_ANY": 0,
        "MP_SMTP_AUTH_ALLOW_INSECURE": 1,
        "MP_MAX_AGE": "30d",
        "MP_UI_AUTH": "admin:${GENERATED_PWD}",
        "MP_SMTP_AUTH": "admin:${GENERATED_PWD}",
        "MP_SMTP_RELAY_ALL": 0,
        "MP_SMTP_RELAY_HOST": "",
        "MP_SMTP_RELAY_PORT": 25,
        "MP_SMTP_RELAY_STARTTLS": 1,
        "MP_SMTP_RELAY_ALLOW_INSECURE": 1,
        "MP_SMTP_RELAY_AUTH": "none",
        "MP_SMTP_RELAY_USERNAME": "",
        "MP_SMTP_RELAY_PASSWORD": "",
        "MP_SMTP_RELAY_SECRET": "",
        "MP_SMTP_RELAY_RETURN_PATH": "",
        "MP_SMTP_RELAY_OVERRIDE_FROM": "",
        "MP_SMTP_RELAY_ALLOWED_RECIPIENTS": "",
        "MP_SMTP_RELAY_BLOCKED_RECIPIENTS": ""
      },
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "mkdir -p data"
        }
      ]
    },
    "deployTime": "~5 minutes",
    "postLaunchNote": "Username is `admin` and password is in environment variable `GENERATED_PWD`.",
    "description": "[Mailpit](https://mailpit.axllent.org/) - email & SMTP testing tool with API for developers. \nMailpit is a small, fast, low memory, zero-dependency, multi-platform email\ntesting tool & API for developers.\nIt acts as an SMTP server, provides a modern web interface to view & test\ncaptured emails, and contains an API for automated integration testing\n",
    "services": [
      "docker"
    ]
  },
  {
    "id": "mattermost",
    "name": "Mattermost",
    "intro": "Mattermost is an open-source, self-hostable online chat service with file sharing, search, and integrations.",
    "logo": "https://avatars.githubusercontent.com/u/9828093",
    "tags": [
      "oss",
      "chat",
      "messaging",
      "team-chat"
    ],
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/mattermost/docker",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yml",
      "preStartCmd": "bash ./fixdocker.sh",
      "env": {
        "MM_SERVICESETTINGS_SITEURL": "${APP_URL}",
        "TZ": "UTC",
        "RESTART_POLICY": "unless-stopped",
        "POSTGRES_IMAGE_TAG": "13-alpine",
        "POSTGRES_DATA_PATH": "./volumes/db/data",
        "POSTGRES_USER": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_DB": "public",
        "CALLS_PORT": "8443",
        "MATTERMOST_CONFIG_PATH": "./volumes/app/mattermost/config",
        "MATTERMOST_DATA_PATH": "./volumes/app/mattermost/data",
        "MATTERMOST_LOGS_PATH": "./volumes/app/mattermost/logs",
        "MATTERMOST_PLUGINS_PATH": "./volumes/app/mattermost/plugins",
        "MATTERMOST_CLIENT_PLUGINS_PATH": "./volumes/app/mattermost/client/plugins",
        "MATTERMOST_BLEVE_INDEXES_PATH": "./volumes/app/mattermost/bleve-indexes",
        "MM_BLEVESETTINGS_INDEXDIR": "/mattermost/bleve-indexes",
        "MATTERMOST_IMAGE": "mattermost-team-edition",
        "MATTERMOST_IMAGE_TAG": "9.11.2",
        "MATTERMOST_CONTAINER_READONLY": "false",
        "MM_SERVICESETTINGS_ALLOWED_ORIGINS": "${APP_URL}",
        "PORT": "3005",
        "MM_SQLSETTINGS_DRIVERNAME": "postgres",
        "MM_SQLSETTINGS_DATASOURCE": "postgres://postgres:postgres@postgres:5432/public?sslmode=disable",
        "MM_FILESETTINGS_DRIVERNAME": "local"
      },
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nsed -e \"s/mattermost:/mattermost:\\n    ports:\\n      - '127.0.0.1:3005:8065'/g\" -i docker-compose.yml\nmkdir -p ./volumes/app/mattermost/{config,data,logs,plugins,client/plugins,bleve-indexes}\nmkdir -p ./volumes/db/data\n# 70 is the standard uid/gid for \"postgres\" in Alpine\n# https://github.com/docker-library/postgres/blob/master/13/alpine3.20/Dockerfile\nsudo chown -R 70:70 ./volumes/db\n# Download config which enables uploads and focalboard plugin\ncurl -o ./volumes/app/mattermost/config/config.json https://gist.githubusercontent.com/huksley/5721e15687fc63e2a197749c4752d80f/raw/1506bb567305ca4fa33db231fb6ab20a091a75f6/mattermost-config.json\nsudo chown -R 2000:2000 ./volumes/app/mattermost\n"
        }
      ]
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/szfZfQFUSnU",
    "deployTime": "~5 minutes",
    "description": "Mattermost is a flexible, open source messaging platform that enables secure\nteam collaboration. It's a self-hosted alternative to proprietary SaaS\nmessaging and brings all your team communication into one place, making it\nsearchable and accessible anywhere.\n\nThis installation enables uploads and Focalboard plugin.\n",
    "services": [
      "postgres",
      "docker"
    ]
  },
  {
    "id": "maybe-finance",
    "name": "Maybe Finance",
    "intro": "The personal finance app for everyone",
    "description": "Maybe is an all-in-one personal finance platform. Track, optimize, grow, and manage your money through every stage of life.",
    "logo": "https://raw.githubusercontent.com/maybe-finance/maybe/refs/heads/main/app/assets/images/logomark-color.svg",
    "deployTime": "~3 minutes",
    "tags": [
      "finance",
      "oss"
    ],
    "experimental": false,
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/EPq54TWKeJQ",
    "services": [
      "docker"
    ],
    "app": {
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourceBranch": "main",
      "sourcePath": "maybe-finance",
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "FRONTEND_URL": "${APP_URL}",
        "SECRET_KEY_BASE": "${GENERATED_HASH}",
        "PORT": "3000"
      }
    }
  },
  {
    "id": "mcdash",
    "name": "MCDash",
    "intro": "MCDash is a simple dashboard for your Minecraft server.",
    "logo": "https://mcdash.gnm.dev/img/favicon.png",
    "tags": [
      "minecraft",
      "dashboard",
      "monitoring",
      "gaming"
    ],
    "experimental": true,
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "mcdash",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT": "7865"
      }
    },
    "services": [
      "docker"
    ],
    "deployTime": "~2 minutes",
    "description": "MCDash is a lightweight and user-friendly dashboard for Minecraft servers.\nIt provides real-time monitoring of your server's performance, player statistics,\nand server status. With a clean and intuitive interface, you can easily track\nserver metrics, manage players, and monitor resource usage.\n"
  },
  {
    "id": "mcp-facebook-ads",
    "name": "Facebook Ads MCP Server",
    "intro": "MCP Proxy with Facebook Ads MCP Server for SSE transport",
    "logo": "https://avatars.githubusercontent.com/u/156911525",
    "tags": [
      "facebook",
      "marketing",
      "mcp",
      "oss",
      "integration"
    ],
    "deployTime": "~5 minutes",
    "description": "This MCP server provides tools for interacting with Facebook Ads objects and data.\n",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "postLaunchNote": "The MCP server will be available at the provided URL with /sse endpoint. Make sure to configure FB_TOKEN for proper Facebook Ads API connectivity.",
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "mcp-facebook-ads",
      "dockerComposeFile": "docker-compose.yml",
      "allowAccessFrom": "${USER_IPADDRESS}",
      "env": {
        "PORT": 8096,
        "FB_TOKEN": "dummy_facebook_access_token"
      }
    }
  },
  {
    "id": "mcp-frappe",
    "name": "Frappe CRM MCP Server",
    "intro": "MCP Proxy with Frappe MCP Server for SSE transport",
    "logo": "https://avatars.githubusercontent.com/u/836974",
    "deployTime": "~2 minutes",
    "tags": [
      "mcp",
      "frappe",
      "crm",
      "oss",
      "integration"
    ],
    "description": "MCP Proxy with Frappe MCP Server provides a secure and efficient way to run Frappe MCP server\nover SSE transport. It allows LLM clients like Claude Desktop to connect to Frappe\nservers through a standardized interface.\n\nThe setup combines MCP Proxy for transport conversion and Frappe MCP Server for\nhandling MCP protocol communications, all in a single container solution.\n",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "postLaunchNote": "The MCP server will be available at the provided URL with /sse endpoint.\nMake sure to configure `FRAPPE_URL`, `FRAPPE_API_KEY`, and `FRAPPE_API_SECRET`\nfor proper Frappe server connectivity.\n",
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "mcp-frappe",
      "dockerComposeFile": "docker-compose.yml",
      "allowAccessFrom": "${USER_IPADDRESS}",
      "env": {
        "PORT": 8096,
        "FRAPPE_URL": "http://localhost:8000",
        "FRAPPE_API_KEY": "frappe",
        "FRAPPE_API_SECRET": 123
      }
    }
  },
  {
    "id": "metabase",
    "name": "Metabase",
    "intro": "The simplest, fastest way to get business intelligence  and analytics to everyone in your company 😋. ",
    "logo": "https://avatars.githubusercontent.com/u/10520629",
    "tags": [
      "business-intelligence",
      "analytics",
      "oss"
    ],
    "requirements": {
      "memory": 4096,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "metabase",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yml",
      "backupCmd": "docker compose exec postgres pg_dumpall -U metabase > metabase.sql",
      "env": {
        "PORT": "3000",
        "METABASE_VERSION": "v0.55.x"
      }
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/dnT2Xj52mnk",
    "deployTime": "~5 minutes",
    "description": "Version: ${METABASE_VERSION}. Fast analytics with the friendly UX and integrated\ntooling to let your company explore data on their own.\nGet your data in front of your team. Connect to your\ndata stack in 5 minutes to make queries, visualizations, and dashboards\neasy for everyone—no SQL required.\n",
    "services": [
      "docker"
    ]
  },
  {
    "id": "miniflux",
    "name": "Miniflux",
    "intro": "Minimalist feed reader",
    "logo": "https://avatars.githubusercontent.com/u/10584991",
    "deployTime": "~3 minutes",
    "tags": [
      "rss",
      "feed",
      "oss"
    ],
    "description": "Provides UI to read RSS feeds. Minimalistic and easy to use, runs natively on your server.\n",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "postgres"
    ],
    "app": {
      "type": "native",
      "repositoryUrl": "https://github.com/miniflux/v2/",
      "sourceBranch": "main",
      "startCmd": "./miniflux-linux-amd64",
      "buildCmd": "make linux-amd64",
      "env": {
        "ADMIN_USERNAME": "${USER_EMAIL}",
        "ADMIN_PASSWORD": "${GENERATED_PWD}",
        "CREATE_ADMIN": 1,
        "DATABASE_URL": "${POSTGRES_URL}",
        "LOG_LEVEL": "info",
        "RUN_MIGRATIONS": 1,
        "BASE_URL": "${APP_URL}",
        "PORT": "8080",
        "LISTEN_ADDR": "127.0.0.1:${PORT}"
      }
    },
    "postLaunchNote": "Username is your e-mail and password is in environment variable `ADMIN_PASSWORD`.\n"
  },
  {
    "id": "n8n",
    "name": "N8N",
    "intro": "Free and source-available fair-code licensed workflow automation tool.",
    "logo": "https://avatars.githubusercontent.com/u/45487711",
    "tags": [
      "automation",
      "workflow",
      "integration",
      "oss"
    ],
    "deployTime": "~5 minutes",
    "description": "n8n helps you connect any app with an API to any other, and manipulate its data with little or no code.\nIt's an easy-to-use, user-friendly and highly customizable service, which uses a visual workflow editor\ninstead of writing code.\n",
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "n8n",
      "sourceBranch": "main",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT": 5678,
        "N8N_HOST": "${APP_HOSTNAME}",
        "N8N_PORT": "${PORT}",
        "N8N_PROTOCOL": "https",
        "WEBHOOK_URL": "${APP_URL}",
        "GENERIC_TIMEZONE": "UTC",
        "DB_TYPE": "postgresdb",
        "DB_POSTGRESDB_HOST": "postgres",
        "DB_POSTGRESDB_PORT": 5432,
        "POSTGRES_DB": "n8n",
        "POSTGRES_USER": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "DB_POSTGRESDB_DATABASE": "n8n",
        "DB_POSTGRESDB_USER": "n8n",
        "DB_POSTGRESDB_PASSWORD": "n8n",
        "POSTGRES_NON_ROOT_USER": "n8n",
        "POSTGRES_NON_ROOT_PASSWORD": "n8n",
        "N8N_ENCRYPTION_KEY": "${GENERATED_HASH}",
        "EXECUTIONS_MODE": "queue",
        "QUEUE_BULL_REDIS_HOST": "redis",
        "QUEUE_HEALTH_CHECK_ACTIVE": true
      },
      "preStartCmd": "bash ./fixdocker.sh",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nmkdir -p data/n8n\nmkdir -p data/n8n/.config\nchmod 0700 data/n8n/.config\nsudo chown 1000:1000 data/n8n\nsudo chown 1000:1000 data/n8n/.config\n"
        }
      ]
    }
  },
  {
    "id": "openvpn",
    "name": "OpenVPN",
    "intro": "OpenVPN is a secure VPN channel to protect traffic",
    "logo": "https://avatars.githubusercontent.com/u/1569141",
    "tags": [
      "networking",
      "vpn",
      "oss"
    ],
    "deployTime": "~5 minutes",
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/4ykbyOEsKQE",
    "description": "OpenVPN is an open-source virtual private network (VPN) solution that \ncreates secure point-to-point or site-to-site connections through\nencrypted tunnels over the internet.\n\nIt masks your IP address and encrypts your internet traffic, helping you \nmaintain anonymity online and preventing ISPs from monitoring your activities.\n",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "postLaunchNote": "Username is `admin` and password is in environment variable `ADMIN_PASSWORD`. Make sure you open 1194 port on your server.",
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates/",
      "sourcePath": "openvpn",
      "dockerComposeFile": "docker-compose.yml",
      "preStartCmd": "touch ./fw-rules.sh && touch ./checkpsw.sh && touch ./server.conf",
      "env": {
        "ADMIN_PASSWORD": "${GENERATED_PWD}",
        "PORT": 8080,
        "TCP_PORT": 1194,
        "UDP_PORT": 1194
      }
    }
  },
  {
    "id": "outline",
    "name": "Outline",
    "logo": "https://avatars.githubusercontent.com/u/1765001",
    "intro": "Outline is a platform for building collaborative knowledge bases.",
    "tags": [
      "knowledge-base",
      "collaboration",
      "oss"
    ],
    "deployTime": "~5 minutes",
    "description": "The fastest knowledge base for growing teams. Beautiful, realtime collaborative, feature packed, and markdown compatible. ",
    "services": [
      "docker"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "outline",
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "URL": "${APP_URL}",
        "PORT": "3000",
        "FILE_STORAGE": "local",
        "FILE_STORAGE_UPLOAD_MAX_SIZE": 26214400,
        "FILE_STORAGE_IMPORT_MAX_SIZE": 26214400,
        "FILE_STORAGE_WORKSPACE_IMPORT_MAX_SIZE": 26214400,
        "SMTP_HOST": "",
        "SMTP_PORT": "",
        "SMTP_USERNAME": "",
        "SMTP_PASSWORD": "",
        "SMTP_SECURE": "",
        "SMTP_FROM_EMAIL": "",
        "UTILS_SECRET": "${GENERATED_SECRET}",
        "SECRET_KEY": "${GENERATED_SECRET}",
        "GOOGLE_CLIENT_ID": "",
        "GOOGLE_CLIENT_SECRET": "",
        "IMAGE_TAG": "0.84.0",
        "PGSSLMODE": "disable"
      }
    },
    "postLaunchNote": "> Remember to configure the SMTP settings and \n> authentication settings in the environment variables and redeploy after that.\n> See the [Outline sample config](https://github.com/outline/outline/blob/main/.env.sample) for more info.\n"
  },
  {
    "id": "pelican",
    "name": "Pelican",
    "intro": "Pelican is the ultimate, free game server control panel offering high flying security.",
    "logo": "https://pelican.dev/img/logo.png",
    "tags": [
      "devops",
      "game-hosting",
      "server-management"
    ],
    "experimental": true,
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "pelican",
      "dockerComposeFile": "docker-compose.yml",
      "postStartCmd": "source .env\ndocker compose exec panel php artisan key:generate --force || true\ndocker compose exec panel php artisan migrate --force || true\ndocker compose exec panel php artisan config:cache || true\ndocker compose exec panel php artisan p:user:make --email=${ADMIN_EMAIL} --password=${ADMIN_PASSWORD} --admin=1 --username=${ADMIN_USERNAME} --name-first=Test --name-last=Test || true\n",
      "env": {
        "PORT": "3000",
        "APP_TIMEZONE": "UTC",
        "APP_SERVICE_AUTHOR": "admin@localhost",
        "HASHIDS_SALT": "${GENERATED_PWD}${GENERATED_PWD}",
        "MYSQL_PASSWORD": "${GENERATED_PWD}",
        "MYSQL_ROOT_PASSWORD": "${GENERATED_PWD}",
        "MAIL_FROM": "noreply@localhost",
        "MAIL_DRIVER": "smtp",
        "MAIL_HOST": "mail",
        "MAIL_PORT": "1025",
        "MAIL_USERNAME": "",
        "MAIL_PASSWORD": "",
        "ADMIN_EMAIL": "${USER_EMAIL}",
        "ADMIN_USERNAME": "admin",
        "ADMIN_PASSWORD": "${GENERATED_PWD}",
        "PORT_WINGS": "8080",
        "PORT_SFTP": "2022",
        "WINGS_UID": "${USER_UID}",
        "WINGS_GID": "${USER_GID}",
        "WINGS_USERNAME": "admin"
      }
    },
    "services": [
      "docker"
    ],
    "deployTime": "~5 minutes",
    "postLaunchNote": "Use username `${ADMIN_USERNAME}` and password `${ADMIN_PASSWORD}` to login.",
    "description": "From prehistoric to peak performance: Pelican takes flight! Pelican is the ultimate,\nfree game server control panel offering high flying security. It's a breeze to manage\nyour servers with our sleek and user-friendly interface. Thanks to Docker, every server\nruns in its own safe space. Pelican is 100% free and open source—forever—for you,\nyour friends, family, and community. We support Minecraft, Terraria, Palworld, Valheim,\nFactorio, and so much more. Whether you're just playing with friends or running a gaming\ncommunity, Pelican scales to the sky. Security is built in, with SSL, 2FA, AES-256\nencryption, and more. One click installs, automatic updates, and an active community\nmake Pelican the best way to host your game servers.\n"
  },
  {
    "id": "plausible",
    "name": "Plausible CE",
    "logo": "https://raw.githubusercontent.com/plausible/community-edition/refs/heads/v2.1.1/images/logo_light.svg",
    "intro": "Simple, lightweight web analytics. No cookies and GDPR compliant.",
    "tags": [
      "analytics",
      "privacy",
      "gdpr",
      "oss"
    ],
    "deployTime": "~1 minute",
    "description": "This template launches Plausible. It is a simple, lightweight web analytics. No cookies and GDPR compliant.",
    "services": [
      "docker"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "repositoryUrl": "https://github.com/plausible/community-edition",
      "sourceBranch": "v2.1.4",
      "type": "docker-compose",
      "dockerComposeFile": "compose.yml",
      "preStartCmd": "bash ./fixdocker.sh",
      "env": {
        "BASE_URL": "${APP_URL}",
        "SECRET_KEY_BASE": "TmfMIAclFEmyljW7cGLVt8vnvotnwmwp${GENERATED_HASH}",
        "HTTP_PORT": "3000",
        "PORT": "3001"
      },
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nsed -e \"s/plausible:/plausible:\\n    ports:\\n      - '127.0.0.1:${PORT}:3000'/g\" -i compose.yml\n"
        }
      ]
    }
  },
  {
    "id": "portainer",
    "name": "Portainer CE",
    "intro": "Portainer Community Edition is a lightweight, open-source platform for managing Docker, Kubernetes, and Swarm environments with a simple, intuitive web interface.",
    "logo": "https://icon.icepanel.io/Technology/svg/Portainer.svg",
    "tags": [
      "devops",
      "docker-management",
      "container-orchestration"
    ],
    "experimental": true,
    "requirements": {
      "memory": 512,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "portainer",
      "dockerComposeFile": "docker-compose.yml",
      "postStartCmd": "",
      "env": {
        "PORT": "9000",
        "PORTAINER_AGENT_PORT": "8000"
      }
    },
    "services": [
      "docker"
    ],
    "deployTime": "~2 minutes",
    "description": "Portainer Community Edition is a universal container management platform that\nsimplifies the deployment, configuration, and monitoring of containerized applications\nacross Docker, Kubernetes, Swarm, and Nomad environments. With its intuitive web-based interface,\nPortainer enables users to manage containers, images, networks, and volumes effortlessly,\nmaking it ideal for both beginners and experienced DevOps teams. It supports hybrid and\nmulti-cloud setups, edge, and Industrial IoT use cases, providing a centralized,\nsecure solution for container orchestration.\n"
  },
  {
    "id": "pterodactyl-wings",
    "name": "Pterodactyl Wings",
    "intro": "The Wings daemon is the core backend of the Pterodactyl game server panel.",
    "logo": "https://pterodactyl.io/logos/pterry.svg",
    "tags": [
      "devops",
      "game-hosting",
      "wings",
      "docker"
    ],
    "experimental": true,
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "pterodactyl-wings",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT_PANEL": "8080",
        "PORT_SFTP": "2022",
        "TZ": "UTC",
        "WINGS_UID": "988",
        "WINGS_GID": "988",
        "WINGS_USERNAME": "pterodactyl"
      },
      "postStartCmd": "echo \"Wings daemon started. If you're using Pterodactyl Panel, make sure the node configuration points to port ${PORT_PANEL}.\"\n"
    },
    "postLaunchNote": "Wings has been deployed. Make sure your Panel connects to port `${PORT_PANEL}` and SFTP runs on `${PORT_SFTP}`.\nYou may configure node settings in the panel using the appropriate IP and port.\n",
    "description": "Pterodactyl Wings is Pterodactyl's server control plane, built for the rapidly changing\ngaming industry and designed to be highly performant and secure. Wings provides\nan HTTP API allowing you to interface directly with running server instances,\nfetch server logs, generate backups, and control all aspects of the server lifecycle.\n"
  },
  {
    "id": "pterodactyl",
    "name": "Pterodactyl",
    "intro": "Open-source game server management panel built for performance, security, and extensibility using Docker containers.",
    "logo": "https://pterodactyl.io/logos/pterry.svg",
    "tags": [
      "devops",
      "game-hosting",
      "server-management"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 20
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourceBranch": "main",
      "sourcePath": "pterodactyl",
      "dockerComposeFile": "docker-compose.yml",
      "postStartCmd": "source .env && docker compose exec panel php artisan p:user:make --email=${ADMIN_EMAIL} --password=${ADMIN_PASSWORD} --admin=1 --username=${ADMIN_USERNAME} --name-first=Test --name-last=Test || true",
      "env": {
        "PORT": "3000",
        "APP_TIMEZONE": "UTC",
        "APP_SERVICE_AUTHOR": "admin@localhost",
        "HASHIDS_SALT": "${GENERATED_PWD}${GENERATED_PWD}",
        "MYSQL_PASSWORD": "${GENERATED_PWD}",
        "MYSQL_ROOT_PASSWORD": "${GENERATED_PWD}",
        "MAIL_FROM": "noreply@localhost",
        "MAIL_DRIVER": "smtp",
        "MAIL_HOST": "mail",
        "MAIL_PORT": "1025",
        "MAIL_USERNAME": "",
        "MAIL_PASSWORD": "",
        "MAIL_ENCRYPTION": "true",
        "ADMIN_EMAIL": "${USER_EMAIL}",
        "ADMIN_USERNAME": "admin",
        "ADMIN_PASSWORD": "${GENERATED_PWD}",
        "PORT_WINGS": "8080",
        "PORT_SFTP": "2022",
        "WINGS_USERNAME": "admin"
      }
    },
    "services": [
      "docker"
    ],
    "deployTime": "~5 minutes",
    "postLaunchNote": "Use username `${ADMIN_USERNAME}` and password `${ADMIN_PASSWORD}` to login.",
    "description": "Pterodactyl is a modern, secure, and scalable game server anagement platform. \nBuilt with PHP, React, and Go, it isolates each game server in its own Docker container\nto maximize security and stability. The web-based interface provides real-time\nWebSocket consoles, role-based user access, a robust API, and SFTP file management.\nDesigned for both hobbyists and enterprises, it supports Minecraft, CS:GO, Rust, ARK, and more.\n"
  },
  {
    "id": "stripe-sync",
    "name": "Stripe Sync",
    "logo": "https://avatars.githubusercontent.com/u/54469796",
    "intro": "Sync your Stripe account to you Postgres database.",
    "tags": [
      "stripe",
      "internal",
      "postgres",
      "oss"
    ],
    "deployTime": "~1 minute",
    "description": "This template provides a Fastify-based server  that exposes a /webhooks endpoint for Stripe, providing a ready-to-run service for real-time Stripe-to-Postgres sync. Read more at  https://github.com/supabase/stripe-sync-engine",
    "services": [
      "docker",
      "postgres"
    ],
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "stripe-sync",
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "DATABASE_URL": "${POSTGRES_URL}?schema=${POSTGRES_SCHEMA}&search_path=${POSTGRES_SCHEMA}",
        "PORT": "8080",
        "STRIPE_SECRET_KEY": "sk_test_dasddasdasdas",
        "STRIPE_WEBHOOK_SECRET": "whsec_dasdasdasdsa",
        "API_KEY": "${GENERATED_HASH}",
        "POSTGRES_SCHEMA": "stripe",
        "BACKFILL_RELATED_ENTITIES": true,
        "MAX_POSTGRES_CONNECTIONS": 10
      }
    }
  },
  {
    "id": "tagmanager",
    "name": "Google Tag Manager Server",
    "logo": "https://avatars.githubusercontent.com/u/4327788",
    "intro": "Setup Google Tag Manager for a first-party cookie.",
    "tags": [
      "analytics",
      "google",
      "gtm"
    ],
    "deployTime": "~1 minute",
    "description": "This template provides a server that can be used to serve Google Tag Manager metrics endpoint for your website. Make sure to set CONTAINER_CONFIG to the value provided by GTM.",
    "services": [
      "docker"
    ],
    "requirements": {
      "memory": 512,
      "cpu": 1,
      "storage": 5
    },
    "app": {
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "tagmanager",
      "type": "docker-compose",
      "dockerComposeFile": "docker-compose.yml",
      "env": {
        "PORT": "8080",
        "CONTAINER_CONFIG": ""
      }
    }
  },
  {
    "id": "template-go",
    "name": "Go app boilerplate",
    "intro": "A boilerplate for building a Go application. Fork this repo and start building your own app quikly.",
    "description": "A boilerplate for building a Go application\nFork this repo and start building your own app quikly.\nThis template is a simple Go application that can be used as a starting point for building your own app.\n",
    "logo": "https://go.dev/images/go-logo-blue.svg",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "deployTime": "~3 minutes",
    "tags": [
      "golang",
      "template",
      "oss"
    ],
    "app": {
      "type": "native",
      "repositoryUrl": "https://github.com/dollardeploy/example-go",
      "sourceBranch": "main",
      "startCmd": "./bin/go-app-linux-amd64",
      "buildCmd": "make",
      "env": {
        "PORT": 3000
      }
    }
  },
  {
    "id": "template-java",
    "name": "Java app boilerplate",
    "intro": "A boilerplate for building a Java application. Fork this repo and start building your own app quikly.",
    "description": "A boilerplate for building a Java application\nFork this repo and start building your own app quikly.\nThis template is a simple Java application that can be used as a starting point for building your own app.\n",
    "logo": "https://avatars.githubusercontent.com/u/317776",
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "deployTime": "~3 minutes",
    "tags": [
      "java",
      "template",
      "spring-boot",
      "oss"
    ],
    "app": {
      "type": "java",
      "repositoryUrl": "https://github.com/dollardeploy/example-java",
      "sourceBranch": "main",
      "env": {
        "PORT": 8080
      }
    }
  },
  {
    "id": "twenty-crm",
    "name": "Twenty CRM",
    "intro": "The #1 Open-Source CRM ${TAG}",
    "logo": "https://github.com/twentyhq/twenty/raw/main/packages/twenty-website/public/images/core/logo.svg",
    "tags": [
      "crm",
      "sales",
      "business",
      "oss",
      "popular"
    ],
    "deployTime": "~3 minutes",
    "description": "The #1 Open-Source CRM Modern, powerful, affordable platform to manage your\ncustomer relationships.\nVersion ${TAG}.\nCheck the releases notes at https://twenty.com/releases\nFor upgrading, see the [self-hosted upgrade guide](https://twenty.com/developers/section/self-hosting/upgrade-guide).\n",
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "twenty-crm",
      "sourceBranch": "main",
      "env": {
        "APP_SECRET": "${GENERATED_HASH}",
        "SERVER_URL": "${APP_URL}",
        "PGPASSWORD_SUPERUSER": "${GENERATED_PWD}",
        "TAG": "v1.0.1",
        "STORAGE_TYPE": "local",
        "PORT": 3000,
        "PG_DATABASE_HOST": "db",
        "SIGN_IN_PREFILLED": true,
        "DOCKER_COMPOSE_WAIT_TIMEOUT": 300,
        "IS_CONFIG_VARIABLES_IN_DB_ENABLED": true,
        "PGDATA_DIR": "/var/lib/postgresql/data",
        "PG_DATABASE_NAME": "default"
      },
      "preStartCmd": "bash ./fixdocker.sh",
      "backupCmd": "docker compose exec db pg_dumpall -U postgres > databases_backup.sql",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nmkdir -p data\nmkdir -p data/tmp\nmkdir -p data/local\nmkdir -p data/db\n# TwentyCRM expects to run as 1000:1000\nsudo chown 1000:1000 data/local\nsudo chown 1000:1000 data/tmp\n# The server must be started by the user that owns the data directory.\nsudo chown root:root data/db\nsudo chmod a+X data/db\n"
        }
      ]
    }
  },
  {
    "id": "uptime-kuma",
    "name": "Uptime Kuma",
    "intro": "Uptime Kuma is a simple, easy-to-use uptime monitoring tool.",
    "logo": "https://raw.githubusercontent.com/louislam/uptime-kuma/master/public/icon.svg",
    "tags": [
      "monitoring",
      "uptime",
      "oss"
    ],
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/uptime-kuma",
      "sourceBranch": "main",
      "dockerComposeFile": "compose.yaml",
      "env": {
        "PORT": "3001"
      }
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/r_A5NKkAqZM?start=403",
    "deployTime": "~5 minutes",
    "description": "Uptime Kuma is a simple, easy-to-use uptime monitoring tool.\nIt's a great way to monitor your website or server uptime.  \nIt's also a great way to monitor your server resources.\n",
    "services": [
      "docker"
    ]
  },
  {
    "id": "wikijs",
    "name": "Wiki.js",
    "intro": "Wiki.js is a modern, feature-rich, and easy-to-use wiki app built on Node.js.",
    "logo": "https://js.wiki/img/wikijs-full-2021.b840e376.svg",
    "tags": [
      "wiki",
      "documentation",
      "oss"
    ],
    "requirements": {
      "memory": 2048,
      "cpu": 2,
      "storage": 10
    },
    "app": {
      "type": "react",
      "repositoryUrl": "https://github.com/requarks/wiki",
      "sourceBranch": "main",
      "buildScript": "build",
      "startScript": "start",
      "preStartCmd": "node -e \"const fs = require('fs'); const package = require('./package.json'); package.dev = false; fs.writeFileSync('./package.json', JSON.stringify(package, null, 2));\"",
      "env": {
        "PORT": 3000,
        "PGSSLMODE": "no-verify",
        "DATABASE_URL": "${POSTGRES_URL}"
      },
      "files": [
        {
          "path": "config.yml",
          "content": "port: 3000\nbindIP: 127.0.0.1\ndatabase:\n  type: postgres\n  host: localhost\n  port: 5432\n  user: postgres\n  password: postgres\n  database: postgres\n  ssl: true\n  schema: public\n  sslOptions:\n    auto: false\n    rejectUnauthorized: false\ndataPath: ./tmp\n"
        }
      ]
    },
    "introVideoUrl": "https://www.youtube-nocookie.com/embed/xjOfL_mMWk4",
    "deployTime": "~20 minutes",
    "description": "A modern, lightweight and powerful wiki app built on NodeJS\n",
    "services": [
      "postgres"
    ]
  },
  {
    "id": "wordpress",
    "name": "WordPress",
    "intro": "The World's Most Popular CMS",
    "logo": "https://avatars.githubusercontent.com/u/276006",
    "deployTime": "~3 minutes",
    "tags": [
      "cms",
      "oss",
      "blog",
      "website",
      "popular"
    ],
    "description": "WordPress is open source software you can use to create a beautiful website, blog, or app.\n",
    "requirements": {
      "memory": 1024,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "wordpress",
      "sourceBranch": "main",
      "env": {
        "MYSQL_ROOT_PASSWORD": "${GENERATED_PWD}",
        "PUBLIC_URL": "${APP_URL}",
        "PORT": "8080"
      },
      "preStartCmd": "bash ./fixdocker.sh",
      "files": [
        {
          "path": "fixdocker.sh",
          "content": "#!/bin/bash\nmkdir -p ./data/db\nmkdir -p ./wordpress\nsudo chown -R 999:999 ./data/db\n"
        }
      ]
    }
  },
  {
    "id": "zulipchat",
    "name": "Zulip Chat",
    "intro": "Organized chat for distributed teams",
    "logo": "https://avatars.githubusercontent.com/u/4921959",
    "deployTime": "~10 minutes",
    "tags": [
      "chat",
      "oss",
      "popular"
    ],
    "description": "WordPress is open source software you can use to create a beautiful website, blog, or app.\n",
    "requirements": {
      "memory": 2048,
      "cpu": 1,
      "storage": 10
    },
    "services": [
      "docker"
    ],
    "app": {
      "type": "docker-compose",
      "repositoryUrl": "https://github.com/dollardeploy/templates",
      "sourcePath": "zulipchat",
      "sourceBranch": "main",
      "env": {
        "POSTGRES_PASSWORD": "${GENERATED_PWD}",
        "MEMCACHED_PASSWORD": "${GENERATED_PWD}",
        "RABBITMQ_PASSWORD": "${GENERATED_PWD}",
        "REDIS_PASSWORD": "${GENERATED_PWD}",
        "SMTP_PASSWORD": "",
        "SMTP_USER": "email@example.com",
        "SMTP_HOST": "smtp.example.com",
        "SMTP_PORT": "587",
        "ZULIP_VERSION": "10.4-0",
        "PORT": "8080",
        "SECRET_KEY": "${GENERATED_HASH}"
      }
    }
  }
]