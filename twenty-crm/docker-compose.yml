services:
    server:
        image: twentycrm/twenty:${TAG}
        volumes:
            - ./data/local:/app/packages/twenty-server/${STORAGE_LOCAL_PATH:-.local-storage}
            - ./data/tmp:/app/docker-data
        ports:
            - '127.0.0.1:$PORT:3000'
        env_file: ".env"
        environment:
            PORT: 3000
            NODE_PORT: 3000
            PG_DATABASE_URL: postgres://${PGUSER_SUPERUSER:-postgres}:${PGPASSWORD_SUPERUSER:-postgres}@${PG_DATABASE_HOST:-db}:5432/${PG_DATABASE_NAME:-postgres}
            SERVER_URL: ${SERVER_URL}
            FRONT_BASE_URL: ${FRONT_BASE_URL:-$SERVER_URL}
            FRONTEND_URL: ${FRONTEND_URL:-$SERVER_URL}
            REDIS_URL: redis://redis:6379

            ENABLE_DB_MIGRATIONS: "true"
            # We will run this ourselves
            DISABLE_DB_MIGRATIONS: "false"
            DISABLE_CRON_JOBS_REGISTRATION: "false"
            IS_CONFIG_VARIABLES_IN_DB_ENABLED: "${IS_CONFIG_VARIABLES_IN_DB_ENABLED:-true}"

            SIGN_IN_PREFILLED: ${SIGN_IN_PREFILLED}
            STORAGE_TYPE: ${STORAGE_TYPE}
            STORAGE_S3_REGION: ${STORAGE_S3_REGION}
            STORAGE_S3_NAME: ${STORAGE_S3_NAME}
            STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
            
            APP_SECRET: ${APP_SECRET}
        depends_on:
            db:
                condition: service_healthy
        healthcheck:
            test: curl --fail http://localhost:3000/healthz
            interval: 5s
            timeout: 10s
            retries: 40
        restart: always

    worker:
        image: twentycrm/twenty:${TAG}
        command: ['yarn', 'worker:prod']
        env_file: ".env"
        volumes:
            - ./data/local:/app/packages/twenty-server/${STORAGE_LOCAL_PATH:-.local-storage}
            - ./data/tmp:/app/docker-data
        environment:
            PG_DATABASE_URL: postgres://${PGUSER_SUPERUSER:-postgres}:${PGPASSWORD_SUPERUSER:-postgres}@${PG_DATABASE_HOST:-db}:5432/${PG_DATABASE_NAME:-postgres}
            SERVER_URL: ${SERVER_URL}
            FRONT_BASE_URL: ${FRONT_BASE_URL:-$SERVER_URL}
            REDIS_URL: redis://redis:6379

            ENABLE_DB_MIGRATIONS: "false"
            DISABLE_DB_MIGRATIONS: "true"
            DISABLE_CRON_JOBS_REGISTRATION: "true"
            IS_CONFIG_VARIABLES_IN_DB_ENABLED: "${IS_CONFIG_VARIABLES_IN_DB_ENABLED:-true}"

            STORAGE_TYPE: ${STORAGE_TYPE}
            STORAGE_S3_REGION: ${STORAGE_S3_REGION}
            STORAGE_S3_NAME: ${STORAGE_S3_NAME}
            STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

            APP_SECRET: ${APP_SECRET}
        depends_on:
            db:
                condition: service_healthy
            server:
                condition: service_healthy
        restart: always

    db:
        image: postgres:16
        volumes:
            - ./data/db:${PGDATA_DIR:-/home/postgres/pgdata}
        environment:
            POSTGRES_USER: ${PGUSER_SUPERUSER:-postgres}
            POSTGRES_PASSWORD: ${PGPASSWORD_SUPERUSER:-postgres}
            ALLOW_NOSSL: 'true'
        healthcheck:
            test: pg_isready -U ${PGUSER_SUPERUSER:-postgres} -h localhost -d postgres
            interval: 5s
            timeout: 5s
            retries: 10
        restart: always

    redis:
        image: redis
        restart: always
        command: ["--maxmemory-policy", "noeviction"]
